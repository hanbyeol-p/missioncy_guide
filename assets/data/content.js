// assets/data/content.js
// 스테이지×모드×코스×레벨별 텍스트를 TEXT에 채워 넣으면 됩니다.
// 이미지는 규칙에 따라 자동 경로 생성: assets/img/s{코스ID}_{모드약자}_lv{레벨}.png
//   - 예) 스테이지 1-1, EASY, 레벨 1 -> assets/img/s1-1_e_lv1.png
//   - 모드 약자: EASY=e, NORMAL=n, HARD=h

// ─────────────────────────────────────────────────────────────
// 1) 여기를 채워 넣으세요: 사람 친화적 원본(TEXT)
//    - goal/hint는 빈 문자열("")로 두고 점차 채워도 됩니다.
//    - 1-4, 2-4는 안내 코스(type:"info") 그대로 유지
//    - 3-4는 레벨(1~3) 있음 → 각 모드에 자리 생성
// ─────────────────────────────────────────────────────────────
const TEXT = {
  1: {
    EASY: {
      "1-1": { levels: {
        1: { goal: "목표 지점에 도달하기", hint: "내가 바라보고 있는 방향에서 오른쪽 왼쪽을 구분하세요!" },
        2: { goal: "목표 지점에 도달하기", hint: "인수를 활용해 코드 라인 수를 줄여보세요!" },
        3: { goal: "보급품 3개 획득하기 \n목표지점에 도달하기", hint: "목표를 확인하여 보급품을 획득하면 조금 더 쉽게 통과할 수 있어요!" },
      }},
      "1-2": { levels: {
        1: { goal: "로켓부품 2개 획득하기\n목표지점에 도달하기\n코드 5줄 이하로 작성하기 (권장)", hint: "반복되는 구간을 for문을 활용한 코드로 작성해보세요!" },
        2: { goal: "로켓부품 2개 획득하기\n코드 14줄 이하로 작성하기 (권장)", hint: "같은 방향으로 2번 회전하면 뒤로 돌 수 있어요!" },
        3: { goal: "로켓부품 4개 획득하기\n코드 18줄 이하로 작성하기 (권장)", hint: "반복하기 위해 캐릭터가 바라보는 마지막 방향을 꼭 설정해주세요!" },
      }},
      "1-3": { levels: {
        1: { goal: "고체추진제 4개 장착하기\n코드 10줄 이하로 작성하기 (권장)", hint: "아이템 장착 시 부품명은 문자이기에 “” 또는 ‘’ 를 사용해야 해요" },
        2: { goal: "액체연료 5개 장착하기\n코드 30줄 이하로 작성하기 (권장)", hint: "for문은 여러 번 사용할 수 있어요!" },
        3: { goal: "추가엔진 6개 장착하기\n코드 30줄 이하로 작성하기 (권장)", hint: "추가엔진을 장착할 때, 방향에 유의하세요!" },
      }},
      "1-4": { goal: "로켓 발사하기", hint: "노란색 바가 90도가 되는 타이밍에 고정해주세요!" }
    },
    NORMAL: {
      "1-1": { levels: {
        1: { goal: "보급품 2개 획득하기\n목표지점에 도달하기", hint: "보급품을 모두 획득하여 목표지점까지 도착하기 위한 최적의 경로를 찾아보세요!" },
        2: { goal: "보급품 2개 획득하기\n목표지점에 도달하기", hint: "보급품 획득 목표개수를 확인하여 최적의 경로로 목표지점까지 도착하세요!" },
        3: { goal: "보급품 3개 획득하기\n목표지점에 도달하기", hint: "경로위에 있는 스위치를 밟으면 레이저가 켜지고, 한번 더 밟으면 레이저를 끌 수 있어요!\n레이저를 끄고 보급품을 획득할 수 있는 경로를 확보하세요!" },
      }},
      "1-2": { levels: {
        1: { goal: "로켓부품 5개 획득하기\n목표지점에 도달하기\n코드 8줄 이하로 작성하기 (권장)", hint: "로켓부품을 모두 획득하지 않아도 괜찮아요!\nfor문을 사용하여 캐릭터가 어떤 경로로 반복해서 움직여야 할 지 코드를 작성해보세요!" },
        2: { goal: "로켓부품 6개 획득하기\n코드 40줄 이하로 작성하기 (권장)", hint: "스위치를 눌렀을 때, 어떤 위치의 레이저가 꺼지는지 확인이 필요해요.\n여러번 도전해도 괜찮으니 레이저의 위치를 확인하고, 반복할 경로를 찾아 for문을 사용해 코드를 작성해보세요!\nfor문은 여러번 사용할 수 있어요!" },
        3: { goal: "로켓부품 8개 획득하기\n코드 60줄 이하로 작성하기 (권장)", hint: "스위치를 눌렀을 때, 어떤 위치의 레이저가 꺼지는지 확인해주세요!\n레이저가 꺼지는 위치로 로켓부품을 획득할 경로를 for문을 사용해 작성해보세요!" },
      }},
      "1-3": { levels: {
        1: { goal: "고체추진제 5개 장착하기\n코드 25줄 이하로 작성하기 (권장)", hint: "노란색 마커까지 이동해야 아이템을 장착할 수 있어요!\nfor문을 사용해 반복할 경로를 찾아 코드를 작성해주세요.\n코드를 25줄 이하로 작성하면 더 높은 점수를 얻을 수 있어요!" },
        2: { goal: "액체연료 5개 장착하기\n코드 35줄 이하고 작성하기 (권장)", hint: "각 스위치는 윗쪽의 레이저와 연결되어 있습니다.\nfor문을 사용해 반복하는 경로를 작성할 때, 스위치를 누른 후 액체연료를 장착할 수 있도록 코드를 작성해주세요!" },
        3: { goal: "추가엔진 6개 장착하기\n코드 45줄 이하로 작성하기 (권장)", hint: "아이템 장착시 장착할 방향에 유의하세요!\n2가지 유형의 경로에서 아이템을 장착하기 위해 for문을 사용하여 코드를 작성해보세요!" },
      }},
      "1-4": { goal: "로켓 발사하기", hint: "노란색 바가 90도가 되는 타이밍에 고정해주세요!" }
    },
    HARD: {
      "1-1": { levels: {
        1: { goal: "보급품 2개 획득하기\n목표지점에 도달하기", hint:"폭탄을 피해 보급품을 모두 획득하여 목표지점까지 도착하기 위한 경로를 찾아보세요!" },
        2: { goal: "보급품 3개 획득하기\n목표지점에 도달하기", hint: "스위치를 밟으면 레이저가 꺼져요.\n스위치를 밟아 경로를 확보해 보급품 3개를 획득하세요!" },
        3: { goal: "보급품 4개 획득하기\n목표지점에 도달하기", hint: "경로 위에 있는 스위치를 밟으면 레이저가 켜지고, 한번 더 밟으면 레이저를 끌 수 있어요!\n레이저를 끄고 보급품을 획득할 수 있는 경로를 확보하세요!" },
      }},
      "1-2": { levels: {
        1: { goal: "로켓부품 모두 획득하기\n목표지점에 도달하기\n코드 40줄 이하로 작성하기", hint: "for i in range() 명령어는 for문 아래 있는 코드를 () 안의 숫자만큼 반복해요!\nfor문을 사용하기 위해선 들여쓰기로 명령어를 입력해야 해요!\n어떤 길을 반복해 보급품을 획득할 수 있을지 경로를 먼저 생각해보고 코드를 작성해볼까요?" },
        2: { goal: "로켓부품 6개 획득하기\n코드 60줄 이하로 작성하기", hint: "위의 스위치는 위쪽 레이저랑, 아래의 스위치는 아래쪽 레이저와 연결되어 있어요!\n선물박스를 누르면 노란발판 위로 보급품이 나와요.\n선물박스를 누른 후, 노란발판으로 가기 위한 반복 경로를 생각하여 코드를 작성해볼까요?" },
        3: { goal: "로켓부품 8개 획득하기\n코드 100줄 이하로 작성하기", hint: "왼쪽 스위치는 왼쪽 방 4개랑, 오른쪽 스위치는 오른쪽 방 4개와 연결되어 있어요!\n선물박스를 누르면 로켓부품이 나와요.\n로켓부품을 얻기 위한 경로를 생각해 for문을 활용한 코드를 작성해보세요!" },
      }},
      "1-3": { levels: {
        1: { goal: "고체추진제 6개 장착하기\n코드 30줄 이하로 작성하기", hint: "노란색 마커까지 이동 후, 고체추진제 작창이 가능해요!\n폭탄을 피해 고체추진제를 모두 장착할 수 있는 경로로 for문을 사용하여 코드를 작성해보세요!" },
        2: { goal: "액체연료 13개 장착하기\n코드 50줄 이하로 작성하기", hint: "각 스위치는 위쪽의 레이저와 연결되어 있어요.\n레이저를 끄고 노란마커로 이동하여 액체연료를 장착하세요!\n액체연료 장착시 장착 방향에 유의하여 for문을 사용해 코드를 작성해보세요!" },
        3: { goal: "추가엔진 18개 장착하기\n코드 50줄 이하로 작성하기", hint: "폭탄을 피해 노란마커로 이동해 추가엔진을 장착할 경로를 for문을 사용해 코드로 작성해보세요!\n각 노란마커에서 장착방향에 유의해 3번씩 장착을 진행해야해요!" },
      }},
      "1-4": { goal: "로켓 발사하기", hint: "노란색 바가 90도가 되는 타이밍에 고정해주세요!" }
    }
  },

  2: {
    EASY: {
      "2-1": { levels: {
        1: { goal: "0에서 9까지 순차적으로 프린트하기\n목표지점에 도달하기", hint: "모니터 앞에서 암호 해독 후, 목표지점까지 이동해야 해요! for문을 사용하면 빠르게 프린트할 수 있답니다! " },
        2: { goal: "획득한 정보 프린트하기\n목표지점에 도달하기", hint: "컴퓨터 앞에서 정보를 획득하고, 출구 앞 모니터 앞에서 획득한 정보를 프린트하세요!" },
        3: { goal: "획득한 숫자의 합 프린트하기\n목표지점에 도달하기", hint: "여러 개의 변수를 활용해 숫자를 획득하고, 변수를 더해 획득한 숫자의 합을 프린트하세요!" },
      }},
      "2-2": { levels: {
        1: { goal: "목표지점에 도달하기", hint: "if문을 활용해 ‘폭탄’을 피하세요!" },
        2: { goal: "목표지점에 도달하기\n코드 8줄 이하로 작성하기 (권장)", hint: "if문을 활용해 ‘벽’을 돌아가세요!" },
        3: { goal: "목표지점에 도달하기", hint: "폭탄이 있을 때와, 그렇지 않을 때의 조건으로 코드를 작성해보세요!" },
      }},
      "2-3": { levels: {
        1: { goal: "목표지점에 도달하기\n코드 3줄 이하로 작성하기 (권장)", hint: "응급치료제를 사용하면 약간의 체력이 회복됩니다.\nwhile문을 활용해 ‘체력’을 회복한 후, 지나가세요!" },
        2: { goal: "목표지점에 도달하기", hint: "치료키트를 사용하면 체력이 완전히 회복됩니다.\nwhile문과 if문을 활용해 체력을 회복하며 불타는 지역을 통과하세요!" },
        3: { goal: "1에서 30까지의 숫자 순차적을 프린트하기\n목표지점에 도달하기", hint: "while문을 사용해 1에서 30까지의 숫자를 프린트하세요!" },
      }},
      "2-4": { goal: "퀴즈 모두 해결하기", hint: "첫 번째, 두 번째 유형의 퀴즈를 풀어보세요!" }
    },
    NORMAL: {
      "2-1": { levels: {
        1: { goal: "7에서 20까지 순차적으로 프린트하기\n목표지점에 도달하기", hint: "for문 range에 두 개의 인지를 사용할 경우 두 인자 사이의 숫자들을 만들 수 있어요.\nrange(2, 7)의 경우 2, 3, 4, 5, 6의 숫자를 만들어요! \n모니터 앞으로 이동해 for문으로 만든 숫자를 프린트 하고 목표지점까지 이동하세요!" },
        2: { goal: "획득한 정보 합쳐서 프린트하기\n목표지점에 도달하기", hint: "각각의 컴퓨터 앞에서 정보를 획득해 변수가 저장한 다음, 정보를 합쳐 모니터 앞에서 프린트하세요!\n프린트 후, 목표지점까지 이동해 탈출하세요!" },
        3: { goal: "0부터 획득한 숫자 사이의 모든 숫자의 합 프린트하기\n목표지점에 도달하기", hint: "컴퓨터 앞에서 숫자 정보를 획득하고, 모니터 앞으로 가 획득한 숫자의 합을 프린트해야 해요!\n1씩 증가하는 숫자는 `(합이 될 변수) += i + 1`로 구할 수 있어요.\n`합이 될 변수 = 0`으로 먼저 변수 선언 후,  for문으로 1씩 증가하는 숫자의 합을 프린트 해보세요!" },
      }},
      "2-2": { levels: {
        1: { goal: "목표지점에 도달하기", hint: "for문 안에 if문을 사용할 수 있어요!\n폭탄도 놓은 규칙을 파악해, 폭탄을 만났을 때 어떤 경로로 피해가야 할 지 코드를 작성해보세요!" },
        2: { goal: "목표지점에 도달하기\n코드 15줄 이하로 작성하기 (권장)", hint: "if, elif, else를 사용하여 ‘폭탄’, ‘벽’ 조건에 따른 행동을 코드로 작성해보세요!\nelse는 폭탄과 벽을 제외한 그 외의 조건을 의미해요." },
        3: { goal: "목표지점에 도달하기", hint: "if문 안에 여러가지 조건을 주기 위해 or 로 조건을 연결할 수 있어요!\n스위치를 밟으면 나오는 보급품을 획득하고, 폭탄을 피해 목표지점으로 도착하세요!" },
      }},
      "2-3": { levels: {
        1: { goal: "목표지점에 도달하기\n코드 25줄 이하로 작성하기 (권장)", hint: "응급치료제를 사용하면 약간의 체력이 회복됩니다.\n선물상자를 밟을 때마다 회복 아이템이 계속해서 나와요!\n선물상자가 놓인 두 곳 중 한 곳으로 이동하여 while문을 이용해 반복문을 작성해보세요!" },
        2: { goal: "목표지점에 도달하기", hint: "치료키트를 사용하면 체력이 완전히 회복됩니다.\nfor문 안에 if문, if문 안에 for문을 넣어서 코드를 작성할 수 있어요!\n== 는 ‘같다’ 라는 의미이고, != 는 ‘같지 않다’ 라는 의미예요.\n기호의 뜻을 구분하여 최소한의 조건으로 코드를 작성해보세요!" },
        3: { goal: "1에서 50 사이의 홀수를 순차적으로 프린트하기\n목표지점에 도달하기", hint: "i % 2 == 0가 짝수를 구하는 코드라면 홀수는 어떻게 구할 수 있을까요?\n같지않다는 기호를 사용해 홀수를 구해보세요!\n순차적으로 다음 수를 구하기 위해선 += 기호를 사용해 코드를 작성해보세요!" },
      }},
      "2-4": { goal: "퀴즈 모두 해결하기", hint: "첫 번째, 두 번째 유형의 퀴즈를 풀어보세요!" }
    },
    HARD: {
      "2-1": { levels: {
        1: { goal: "1에서 30까지의 숫자 중 3의 배수를 순차적으로 프린트하기\n목표지점에 도달하기", hint: "range(시작 숫자, 마지막 숫자, 배수)를 적어 원하는 숫자를 프린트할 수 있어요!\nrange(4, 12, 2)의 경우 4, 6, 8, 10의 숫자를 출력할 수 있어요." },
        2: { goal: "획득 정보를 합쳐서 획득한 숫자만큼 반복하여 프린트하기\n목표지점에 도달하기", hint: "컴퓨터 앞에서 획득한 정보를 number 변수에 저장해요!\nanswer 변수에 getInfo() 함수의 값을 추가해요!\ngetInfo()는 값을 반환하는 함수로 변수 선언 없이 사용할 수 있어요!" },
        3: { goal: "획득한 숫자부터 0까지 1씩 감소하는 모든 숫자 순차적으로 프린트하기\n목표지점에 도달하기", hint: "컴퓨터에서 얻은 정보를 number 변수에 저장해요.\nrange() 괄호 안에 number에서 획득한 숫자부터 0까지 1씩 감소하도록 하려면 코드를 어떻게 작성해야할까요?\nrange(시작하는 수, 마지막 수 -1, 감소 단위)에 들어갈 정보를 입력해보세요!" },
      }},
      "2-2": { levels: {
        1: { goal: "목표지점에 도달하기", hint: "checkFront() 는 바로 앞 칸, checkFar() 은 다음 칸을 의미해요!\n폭탄이 1개일 때의 조건과, 폭탄이 2개일 때의 조건을 checkFront() 와 checkFar() 을 사용해 if문으로 작성 해보세요!" },
        2: { goal: "목표지점에 도달하기\n코드 15줄 이하로 작성하기", hint: "for문 안에 이동 명령어와 if문을 사용해 코드를 작성해보세요!\nif문 작성시 or 연산자를 사용해 앞에 벽이나 폭탄이 있을 경우 캐릭터의 이동 명령어를 작성해보세요!" },
        3: { goal: "목표지점에 도달하기", hint: "for문 안에 if문과 checkFront(), checkFar() 함수를 이용하여 폭탄을 피하는 코드를 작성해보세요!\n폭탄이 연속되지 않는 경우 jump() 명령어를 사용해 피할 수 있어요!" },
      }},
      "2-3": { levels: {
        1: { goal: "목표지점에 도달하기\n코드 40줄 이하로 작성하기", hint: "불타는 지역을 지날때마다 체력이 15씩 감소해요!\n선물상자를 밟으면 나오는 응급치료제를 이용해 체력을 충분히 회복시켜 목표지점까지 도달하세요!" },
        2: { goal: "목표지점에 도달하기", hint: "for문 안에 여러 개의 if문을 사용할 수 있어요.\n1. go() 명령어를 반복해요\n2. if문으로 체력이 10이하로 떨어지기 전, 치료키트를 사용해 체력을 모두 회복해요!\n3. if문에 checkFront(), checkLeft(), checkRight() 함수를 사용하여 폭탄을 피할 이동 명령어를 작성해요." },
        3: { goal: "1에서 87사이의 숫자 중 7로 끝나는 숫자를 순차적으로 프린트하기\n목표지점에 도달하기", hint: "while문에 i 변수를 이용해 88 미만일 때 계속 반복하도록 반복문을 작성해요.\nif i % 10 == 0 구문은 i를 10으로 나누었을 때 나머지가 0일 경우예요.\n나머지가 7일 경우는 어떤 코드를 작성해야 할까요? \nwhile문 아래 if문을 이용해 1의 자리가 7로 끝나는 숫자를 구하는 코드를 작성해보세요!" },
      }},
      "2-4": { goal: "퀴즈 모두 해결하기", hint: "첫 번째, 두 번째 유형의 퀴즈를 풀어보세요!" }
    }
  },

  3: {
    EASY: {
      "3-1": { levels: {
        1: { goal: "문자열을 대문자로 변환한 후 프린트하여 우주해적 3명을 공격하기", hint: "우주해적 앞으로 이동해 우주해적의 정보를 얻고, 얻은 정보를 소문자를 대문자로 만들어주는 문자열 명령어로 프린트하세요!" },
        2: { goal: "획득한 문자열에서 0번 인덱스, 3번 인덱스, 5번 인덱스의 문자를 순차적으로 프린트하여 폭탄 설치하기", hint: "획득한 정보의 문자열에서 0번, 3번, 5번 인덱스를 순서대로 하나씩 프린트하세요!" },
        3: { goal: "획득한 문자열의 1번 인덱스부터 4번 인덱스까지의 문자열을 프린트하여 레이저 작동하기", hint: "획득한 정보의 문자열에서 1번 부터 5번 전까지의 인덱스를 프린트하세요!" },
      }},
      "3-2": { levels: {
        1: { goal: "상자를 열어 리스트에 담고 확인하기", hint: "먼저 리스트를 생성하고, 상자 앞으로 이동해 획득한 정보를 리스트에 담아주세요!" },
        2: { goal: "상자를 열고 append()를 사용하여 리스트에 담고 프린트하기", hint: "append()는 리스트 맨 뒤에 값을 추가한다는 의미예요!\n리스트를 프린트 한 후 목표지점까지 이동해야 해요!" },
        3: { goal: "각 상자를 열어 리스트를 획득하고 하나의 리스트로 합친 후 확인하기", hint: "복합 대입 연산자(+=)를 활용해 여러 개의 리스트를 하나로 합쳐보세요!" },
      }},
      "3-3": { levels: {
        1: { goal: "함수를 사용하여 폭탄 3개 설치하기", hint: "함수 선언은 실행할 코드 위에 먼저 적어주어야 해요!" },
        2: { goal: "함수를 사용하여 폭탄 3개 설치하기", hint: "매개변수를 활용하여 함수를 선언해보세요!" },
        3: { goal: "함수를 사용하여 폭탄 설치하기", hint: "함수는 여러 개를 선언할 수 있어요!\n모니터 앞에서 countEnemy() 함수를 사용하면 적의 수가 [2,2,1]과 같이 리스트로 반환됩니다.\n리스트에 담긴 적의 수를 모두 더해, 그 합만큼 폭탄을 설치하세요!" },
      }},
      // 3-4는 레벨이 있음(1~3)
      "3-4": { levels: {
        1: { goal: "적 2명 처치하기", hint: "적의 이름은 문자이기에 “” 또는 ‘’ 를 사용해야 해요" },
        2: { goal: "적 3명 처치하기", hint: "앞으로 두 칸 이동 후, 적을 공격하세요!" },
        3: { goal: "보스의 폭탄을 활용하여 3회 공격하기\n보스 처치하기", hint: "while문과 if문을 활용하여 보스를 공격하는 코드를 작성해보세요!" },
      }},
    },
    NORMAL: {
      "3-1": { levels: {
        1: { goal: "획득한 문자열의 각 알파벳을 3번씩 반복한 문자열을 프린트하여 우주해적 3명을 공격하기", hint: "for char in info 구문을 사용하면 내가 획득한 정보의 문자열의 단어를 각각의 알파벳으로 char에 담을 수 있어요.\n위 구문 아래 for 반복문을 사용하여, char에 들어가는 알파벳을 3개씩 증가시키는 코드를 작성해보세요!\n반복문 for 안에 for문을 사용할 때는 다른 i 가 아닌 다른 변수를 사용해 반복문을 작성해야 해요." },
        2: { goal: "획득한 문자열의 길이 프린트하기\n획득한 문자열의 4번 인덱스부터 7번 인덱스까지 문자열을 프린트하기\n획득한 문자열의 10번 인덱스부터 마지막 인덱스까지의 문자열을 프린트하기", hint: "먼저 컴퓨터 앞에서 정보를 획득해 모니터로 가 해당하는 인덱스를 프린트해요.\n1. 획득한 정보의 문자열 길이 프린트하기\n2. 인자를 활용하여 4번 인덱스부터 7번 인덱스까지 프린트하기\n3. 문자열의 마지막 인덱스는 문자열의 길이를 구할 때 사용한 구문을 활용하여 프린트하기" },
        3: { goal: "획득한 문자열의 마지막 문자, 뒤에서 3번째 문자, 뒤에서 5번째 문자를 하나의 문자로 프린트하여 레이저 작동하기", hint: "문자열의 길이를 구하는 구문을 변수에 담아 원하는 자리의 인덱스의 문자열을 구할 수 있어요.\n정보를 담은 변수[문자열 길이를 담은 변수 - 원하는 자리의 숫자]를 사용해 원하는 자리의 인덱스의 문자열을 프린트 해보세요!" },
      }},
      "3-2": { levels: {
        1: { goal: "상자를 열어 리스트에 담고 확인하기\n코드 12줄 이하로 작성하기 (권장)", hint: "itemList = [0, 0, 0]은 요소가 모두 0이고 길이가 3인 리스트를 생성하는 구문이예요.\n요소가 모두 0이고 길이가 5인 리스트를 생성하기 위한 코드는 어떻게 작성해야 할까요?\n상자 앞으로 이동해 생성한 아이템의 정보를 얻고, 정보를 리스트에 담는 것을 for문을 사용해 5번 반복하세요!\n마지막에 check() 구문으로 리스트를 확인해주세요!" },
        2: { goal: "한 상자당 3번 아이템을 획득하고 리스트에 담기\nremove()를 사용하여 “고장난 폭탄”을 제거하고 프린트하기", hint: "리스트 생성시 [] 안에 요소를 쓰지 않아도 `itemList = []` 만으로 리스트를 생성할 수 있어요.\nappend()를 사용하여 리스트에 아이템을 추가할 수 있어요.\n변수를 사용하지 않아도 getItem()구문으로 정보를 획득할 수 있어요!" },
        3: { goal: "각 상자를 열어 아이템리스트를 획득하기\n각 리스트의 처음부터 세 번째 아이템을 하나의 리스트로 합치고 확인하기", hint: "for문을 사용해 3번 반복하도록 하면 인덱스를 처음부터 3번째 까지만 접근할 수 있어요.\nappend() 구문으로 생성한 리스트에 아이템을 추가하세요!\n마지막에 리스트를 확인하는 것 잊지마세요!" },
      }},
      "3-3": { levels: {
        1: { goal: "함수를 사용하여 폭탄 설치하기", hint: "함수는 실행코드보다 먼저 작성되어야 해요. 먼저 함수 코드를 작성해볼까요?" },
        2: { goal: "함수를 사용하여 폭탄 9개 설치하기", hint: "getNumber() 함수로 모니터에서 적의 정보를 얻고, number 매개변수를 활용하여 코드를 완성하세요!\ngo(5 - N) 이라고 입력하면 5칸에서 N만큼 뺀 횟수만큼 앞으로 이동해요!" },
        3: { goal: "함수를 사용하여 폭탄 설치하기", hint: "totalNumber 변수에 countEnemy() 함수의 반환값을 저장해 사용할 수 있어요!\n모니터 앞에서 countEnemy() 함수를 사용하면 해당 라인에 등장하는 적의 수가  [2,2,1]과 같이 리스트로 반환됩니다.\n리스트에 담긴 적의 수를 모두 더해, 그 합만큼 해당 라인에 폭탄을 설치하세요." },
      }},
      "3-4": { levels: {
        1: { goal: "적 2명 처치하기\n코드 8줄 이하로 작성하기 (권장)", hint: "while문을 사용하여 적의 Hp가 0이 될 때까지 무한반복으로 공격해야 해요!\n`attack(”적 이름”)` 으로 적을 공격하여 처리하세요!" },
        2: { goal: "적 2명 처치하기", hint: "for문을 이용해 적을 공격해볼까요?\nenemy = findEnemy() 구문을 사용하여 가까운 적을 찾아 공격하세요!\n적의 Hp가 0이 될때까지 attack() 구문으로 공격하세요!" },
        3: { goal: "보스의 폭탄을 활용하여 3회 공격하기\n보스 처치하기", hint: "if elif else를 사용하여 보스를 처치할 수 있는 코드를 작성해보세요.\n폭탄을 만났을 때 폭탄을 얻은 후, 체력을 먼저 확인하여 회복한 후 보스를 공격해요!" },
      }},
    },
    HARD: {
      "3-1": { levels: {
        1: { goal: "획득한 문자열의 대문자 개수와 소문자 개수의 차이를 프린트하여 우주해적 3명 공격하기", hint: "노란마크에서 info 변수에 getInfo() 구문으로 우주해적의 문자열 정보를 획득해요!\nfor char in info 구문으로 획득한 문자열을 각각의 알파벳으로 char 변수에 담을 수 있어요.\n이 구문 아래 if문을 이용하여\n1.  `char.isupper()` 구문으로 알파벳이 대문자일 경우 answer 변수에 1씩 증가하도록\n2. 아닐경우 1씩 감소하도록 하여 대문자 개수와 소문자 개수의 차이를 구할 수 있어요!\n문자열수의 증가는 `+=` 로, 문자열수의 감소는 `-=` 로 나타내요!" },
        2: { goal: "획득한 문자열이 홀수 길이면 중간의 한 개 문자를, 짝수 길이면 중간의 두 개 문자를 프린트하여 폭탄 설치하기", hint: "먼저 컴퓨터 앞에서 획득한 문자열을 info 변수에 저장하고, 획득한 문자열의 길이를 구해 length 변수에 저장해요! \ninfo[int(length/2)]는 중간의 한 개 문자를 출력하고,\ninfo[int(length/2)-1]는 중간 앞의 문자까지 함께 출력해요!\nif문을 이용하여 획득한 정보의 문자열 길이 홀수, 짝수 판단해 해당하는 문자를 프린해보세요!\ni % 2 != 0가 홀수를 구하는 코드라면 짝수는 어떻게 구할 수 있을까요?\n같다는 기호를 사용해 짝수를 구해보세요!" },
        3: { goal: "획득한 문자열에서 연속된 중복문자를 제거하고 프린트하여 레이저 작동하기", hint: "컴퓨터 앞에서 문자열을 획득해 info 변수에 넣고, 모니터 앞으로 가 필요한 문자열만 프린트 해야해요!\n1. answer 변수에 info 변수에 저장된 문자열의 첫 번째 변수를 저장해요\n2. for char in info: 구문으로 각 문자를 char 변수에 각각 알파벳으로 저장해요\n3. if문을 사용하여 answer 변수가 비어있지 않고 answer != “ ”, 마지막 문자와 현재 문자 char가 다를 경우 answer[-1] != char\n4. answer 변수에 char 문자를 추가해요\n이렇게 구한 answer 변수의 값을 프린트 해볼까요?" },
      }},
      "3-2": { levels: {
        1: { goal: "상자를 열어 획득한 아이템이 “고장난 폭탄”이 아닐경우 리스트에 담고 확인하기\n코드 14줄 이하로 작성하기", hint: "itemList = []를 생성하여 item의 정보를 담을 수 있어요!\n아이템 앞 노란마커로 이동해 for문으로 반복문을 작성해요.\nfor문 아래 item의 정보를 얻고, if문을 사용하여 “고장난 폭탄”이 아닐 경우, \n앞에서 생성한 리스트에 append()구문으로 item을 추가해주세요!\n마지막에 check() 구문으로 리스트를 확인해주세요!" },
        2: { goal: "각 상자에서 5번 아이템(숫자)를 획득하기\ninsert()를 사용하여 리스트에 숫자를 오름차순으로 정렬된 위치에 넣고 프린트하기", hint: "리스트는 맨 처음에 1번만 초기화해요.\n아이템 앞의 노란마커에서 item 변수에 getItem()으로 아이템의 정보를 얻을 수 있어요.\n얻은 정보를 오름차순으로 정렬해볼까요?\n1. if문을 사용하여 itemList의 리스트 길이가 0인지 확인해요\n0이라면 append() 함수로 리스트에 아이템을 추가해요.\n2. 리스트에 이미 값이 들어있다면, \nj 변수를 이용해 리스트를 비교하며 아이템을 넣을 위치를 결정해야해요.\n3. while문을 이용하여 \nj가 리스트 길이보다 작고, itemList[j]의 값이 item보다 작으면 \nj의 값을 1씩 추가해요.\n4. 리스트에 insert() 함수를 이용하여 j번째 위치에 item을 삽입해요.\n다음 노란마커로 이동해 모니터에서 오름차순으로 정렬해 얻은 정보를 프린트해요!" },
        3: { goal: "각 상자를 열어 아이템 리스트를 획득하고 하나의 리스트로 합치기\n합쳐진 리스트에서 각 아이템의 끝 네 자리가 2050보다 작은 아이템을 제거하고 확인하기", hint: "먼저 itemListAll 리스트를 생성해요!\nfor문을 이용해 노란마커로 이동해 각 상자 앞에서 getItemList()로 생성한 리스트에 추가해요.\n다음 for문에서 각 아이템의 끝 네 자리가 2050보다 작은 아이템을 제거해야해요!\n1. range(itemListAll의 길이 -1, -1, -1)으로 0까지 역순으로 인덱스를 반복해요\n2. 아래 if문을 이용하여 itemListAll[i]를 10000으로 나눈 나머지가 2050보다 작은 경우\n3. remove() 함수를 사용하여 itemListAll[i]의 값을 리스트에서 제거해요\n마지막에 check() 함수로 리스트를 확인하여 목표를 달성하세요!" },
      }},
      "3-3": { levels: {
        1: { goal: "함수를 사용하여 폭탄 9개 설치하기", hint: "함수는 실행코드보다 먼저 작성되어야 해요. 폭탄을 설치하고, 뒤돌아 한걸음 간 다음 다시 앞을 보는 함수를 작성해볼까요?\n모니터 앞으로 이동해 getNumber() 구문으로 number 변수에 정보를 저장해요!\n제일 끝 노란마커로 이동해 앞에서 작성한 함수를 number에서 얻은 정보만큼 반복하도록 해요.\n폭탄을 설치하고 go() 명령어로 이동할 때, 5칸에서 number의 수를 뺀만큼만 더 이동하도록 해요!" },
        2: { goal: "함수를 사용하여 폭탄 9개 설치하기", hint: "함수 생성시 ()안에 매개변수로 numberList와 index를 적어줘요!\n함수 아래 for문을 사용하여 range(numberList[index]) 값만큼 반복하도록 하고, 아래 폭탄을 설치하고 뒤돌아 한걸음 이동했다 다시 앞으로 보는 명령어를 입력해요!\n컴퓨터 앞으로 이동해 getNumberList() 구문으로 numberList 변수에 얻은 정보를 저장해요!\n얻은 정보를 이용해 for문 안에 이동 명령어와 함수를 사용해 폭탄을 설치하는 코드를 완성해보세요!\nfor문 아래 함수 작성시 index자리에 i 변수를 사용해 적어주세요!" },
        3: { goal: "함수를 사용하여 폭탄 설치하기", hint: "먼저 폭탄을 설치하고 뒤를 돌아 물러서 다시 앞을 보는 첫 번째 함수를 입력해요.\n두 번째로 적의 수를 세는 함수를 만들어야 해요.\n1. count 변수의 값을 0으로 만들어요.\n2. getNumber() 구문으로 number 변수에 정보를 저장해요.\n3. while문을 사용하여 number가 0보다 클 때 무한반복하도록 해요.\n그 아래 count 변수에 number 변수의 값을 추가해요.\n그 아래 getNumber() 구문으로 number 변수가 정보를 저장해요. \n해당 구문을 while문 안에서 다시 반복함으로 number에 저장한 값을 count에 계속해서 추가하도록 할 수 있어요! \n4. 마지막 return()으로 count의 값을 반환해요.\n이제 두 가지 함수를 가지고 미션을 해결하기 위한 코드를 작성해볼까요?\ntotalNumber 변수에 적을 세는 countEnemy() 함수의 값을 저장해 다양하게 사용할 수 있어요!" },
      }},
      "3-4": { levels: {
        1: { goal: "적 2명 처치하기\n코드 15줄 이하로 작성하기", hint: "findEnemy()구문을 이용해 enemy 변수로 적을 찾은 정보를 저장해요!\nwhile문을 사용하여 적의 Hp가 0이 될 때까지 무한반복으로 공격해야 해요!\nattack(”적 이름”) 으로 적을 공격하여 처리하세요!\nif문을 사용해 공격을 받아 체력이 41 미만으로 떨어진다면 치료키트로 체력을 회복하세요!" },
        2: { goal: "적 모두 처치하기", hint: "enemy = findEnemy() 구문을 사용하여 가까운 적을 찾아 공격하세요!\nwhile문을 사용하여 적의 Hp가 0이 될때까지 attack() 구문으로 계속해서 공격하세요!\n그 아래 적을 찾는 코드를 추가해 계속해서 적을 찾아 공격할 수 있어요!\n만약 공격을 받아 체력이 100보다 떨어진다면 치료키트를 사용해 체력을 회복하세요!" },
        3: { goal: "보스의 폭탄을 활용하여 3회 공격하기\n보스 처치하기", hint: "for문 안에 if elif else를 사용하여 보스를 처치할 수 있는 코드를 작성해보세요.\n폭탄을 찾을 때마다, 비밀번호를 풀어 보스에게 던지세요.\n첫 번째 if문으로 체력이 100 미만일 때 “치료키트”를 사용해 체력을 회복해요.\n두 번째 if문으로 폭탄을 만났을 때, 벽을 만났을 때, 아무것도 아닐 때의 코드를 작성해요.\n1. 폭탄을 만났을 때, getBomb() 구문으로 획득한 폭탄을 numberList 에 저장해요.\n     a. password 변수의 값을 0으로 초기화해요.\n     b. for문을 이용하여 numberList의 숫자 중 짝수만 골라, password에 더해 짝수들의 총합을 구해보세요. 예를들어 numberList가 [3,4,6]이면, 4와 6을 더해 password는 10이 됩니다.\n     c. chargeShot() 구문에 password를 넣어 폭탄의 암호를 해제해 보스를 공격해요.\n2. 벽을 만났을 때, 아무것도 아닐 때의 조건에서 코드를 작성해요." },
      }},
    }
  }
};

// ─────────────────────────────────────────────────────────────
// 2) 이미지 경로 자동 생성 (규칙 적용)
// ─────────────────────────────────────────────────────────────
const MODE_KEY = { EASY: "e", NORMAL: "n", HARD: "h" };
function levelImagePath(stageNo, courseId, mode, levelNo) {
  const m = MODE_KEY[mode] || "e";
  return `assets/img/s${courseId}_${m}_lv${levelNo}.png`;
}

/* (추가) 스테이지별 설명 */
const STAGE_INFO = {
  1: { desc: "지구의 환경이 심각하게 오염되어 더 이상 살 수 없는 상태가 되었습니다. 이제 여러분은 인류의 미래를 위해 우주로 떠나 미지의 행성을 개척해야 합니다. 우주 탐사를 위해 기본적인 이동 방법을 배워봅시다." },
  2: { desc: "새로운 행성에 성공적으로 착륙했습니다. 우주복을 착용하고 미지의 행성을 탐사하세요. 복잡한 암호를 해독하여 행성의 비밀을 밝혀내는 것이 여러분의 임무입니다. " },
  3: { desc: "우주 해적의 우주함선에 도착했습니다. 함선 내부에는 수많은 적군이 보입니다. 우주 해적을 정복하기 위해 함선을 탐사해 나가세요. " }
};




// ─────────────────────────────────────────────────────────────
// 3) TEXT → CONTENT 변환 (앱이 읽는 구조)
// ─────────────────────────────────────────────────────────────
function buildContent(TEXT_SRC) {
  const CONTENT = { stages: {} };
  const MODES = ["EASY", "NORMAL", "HARD"];

  Object.keys(TEXT_SRC).forEach((stageKey) => {
    const stageNo = Number(stageKey);
    const stageData = TEXT_SRC[stageKey] || {};
    const perMode = {};

    MODES.forEach((mode) => {
      const modeData = stageData[mode] || {};
      const courses = ["1", "2", "3", "4"].map((n) => `${stageNo}-${n}`);
      const pages = {};

      courses.forEach((cid) => {
        const entry = modeData[cid];

        // 안내 코스
        if (entry && entry.type === "info") {
          pages[cid] = {
            title: `스테이지 ${cid}`,
            type: "info",
            body: entry.body || ""
          };
          return;
        }

        // 레벨(1~3) 코스
        const lvMap = (entry && entry.levels) || {};
        const levels = [1, 2, 3].map((n) => ({
          no: n,
          img: levelImagePath(stageNo, cid, mode, n),
          goal:
            (lvMap[n] && lvMap[n].goal) ||
            `목표를 작성해 주세요 (S${stageNo}/${mode}/${cid}/L${n})`,
          hint:
            (lvMap[n] && lvMap[n].hint) ||
            `힌트를 작성해 주세요 (S${stageNo}/${mode}/${cid}/L${n})`
        }));

        // (참고) 1-4 / 2-4는 TEXT에 info로 이미 정의됨
        pages[cid] = { title: `스테이지 ${cid}`, type: "levels", levels };
      });

      perMode[mode] = { courses, pages };
    });

    CONTENT.stages[stageNo] = {
      modes: MODES,
      perMode,
      desc: (STAGE_INFO[stageNo]?.desc || "")
    };
  });

  return CONTENT;
}

// ─────────────────────────────────────────────────────────────
// 4) 앱에서 사용하는 최종 객체
// ─────────────────────────────────────────────────────────────
const CONTENT = buildContent(TEXT);
